// process.on('uncaughtException', (error, origin) => {
// 	console.log('----- Uncaught exception -----')
// 	console.log(error)
// 	console.log('----- Exception origin -----')
// 	console.log(origin)
// })

// process.on('unhandledRejection', (reason, promise) => {
// 	console.log('----- Unhandled Rejection at -----')
// 	console.log(promise)
// 	console.log('----- Reason -----')
// 	console.log(reason)
// })

//import cluster from 'cluster';

// const cluster = require('cluster');
// //import http from 'http';
// const { cpus } = require('os');

// const process = require('process');

// const numCPUs = cpus().length;

// if (cluster.isPrimary) {
//  console.log(`Primary ${process.pid} is running`);

//  // Fork workers.
//  for (let i = 0; i < numCPUs; i++) {
//   cluster.fork();
//  }

//  cluster.on('exit', (worker, code, signal) => {
//   console.log(`worker ${worker.process.pid} died`);
//  });
// } else { }
// Workers can share any TCP connection
// In this case it is an HTTP server
//  http
//   .createServer((req, res) => {
//    res.writeHead(200);
//    res.end('hello world\n');
//   })
//   .listen(8000);

//  console.log(`Worker ${process.pid} started`);
// }
























[[[const express = require('express')
const router = express.Router()

// middleware that is specific to this router
const timeLog = (req, res, next) => {
  console.log('Time: ', Date.now())
  next()
}
router.use(timeLog)

// define the home page route
router.get('/', (req, res) => {
  res.send('Birds home page')
})
// define the about route
router.get('/about', (req, res) => {
  res.send('About birds')
})

module.exports = router
Then, load the router module in the app:

const birds = require('./birds')

// ...

app.use('/birds', birds)]]]
